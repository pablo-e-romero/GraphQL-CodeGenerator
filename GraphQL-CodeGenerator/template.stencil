{# Macro declarations #}

{% macro renderDescription type %}
{% for line in type.descriptionLines %}
/// {{ line }}
{% endfor %}  
{% endmacro %}

{% macro renderInterfaces type %}{% if type.conformsSomeInterface %}: {% for interfaceName in type.interfacesName %}{% if not forloop.first %}, {% endif %}{{ interfaceName }}{% endfor %}{% endif %}{% endmacro %}

{% macro renderDeprecation type %}
{% if type.isDeprecated %}
    {% if type.hasDeprecationReason %}
@available(*, deprecated, message: "{{ type.deprecationReason }}")
    {% else %}
@available(*, deprecated)  
    {% endif %}
{% endif %}
{% endmacro %}

{% macro renderTypeDeclaration type %}{% if type.isArray %}[{{ type.typeName }}]{% else %}{{ type.typeName }}{% endif %}{% if type.isOptional %}?{% endif %}{% endmacro %}

{% macro renderAssociatedValues enumValue %}{% if enumValue.hasAssociatedValues %}({% for value in enumValue.associatedValues %}{{ value.name }}: {% call renderTypeDeclaration value %}{% if not forloop.last %}, {% endif %}{% endfor %}){% endif %}{% endmacro %}

{# Template implementation #}

// MARK: - Objects

{% for object in objects %}
    {% call renderDescription object.descriptionLines %}
public struct {{ object.name }}{% call renderInterfaces object %} {
    {% for field in object.fields %}
        {% call renderDescription field %}
        {% call renderDeprecation field %}
    public let {{ field.name }}: {% call renderTypeDeclaration field %}
    {% endfor %}
}

{% endfor %}

// MARK: - Enums

{% for enum in enums %}
    {% call renderDescription enum.descriptionLines %}
public enum {{ enum.name }} {
    {% for enumValue in enum.values %}
        {% call renderDescription enumValue %}
        {% call renderDeprecation enumValue %}
    case {{ enumValue.name }}{% call renderAssociatedValues enumValue %}
    {% endfor %}
}

{% endfor %}

// MARK: - Protocols

{% for interface in interfaces %}
{% call renderDescription interface.descriptionLines %}    
public protocol {{ interface.name }}{% call renderInterfaces interface %} {
    {% for field in interface.fields %}
        {% call renderDescription field %} 
        {% call renderDeprecation field %}
    var {{ field.name }}: {% call renderTypeDeclaration field %} { get }
    {% endfor %}
}

{% endfor %}